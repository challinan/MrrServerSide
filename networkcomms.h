#ifndef NETWORKCOMMS_H
#define NETWORKCOMMS_H

#include <QObject>
#include <QTcpServer>
#include <QTcpSocket>
#include <QHostAddress>
#include <QDataStream>
#include <QByteArray>
#include "serialcomms.h"
#include "gstreamer_serverside.h"

#define MRR_NETWORK_PORT 4532
//#define MRR_SERVER_ADDR QHostAddress::LocalHost
#define MRR_SERVER_ADDR QHostAddress("imac-wifi")
#define MAX_READ_SIZE 128
#define MAX_WRITE_SIZE 128

class NetworkComms : public QObject
{
    Q_OBJECT
public:
    explicit NetworkComms(QObject *parent = nullptr);
    ~NetworkComms();
    void openNetworkListener();
    void setSerialObjectPointer(SerialComms *serial_comms_p);

public slots:
    void NewConnection();
    void disconnected();    // Generated by QAbstractSocket, when the socket has been disconnected.
    void readData();        // Our slots for processing read data
    void writeData(QByteArray ba);       // Our slots for processing write data
    void errorOccurredSlot(QAbstractSocket::SocketError socketError);   // Any error from the socket (generated by QAbstractSocket)
    void bytesWritten(qint64 bytes);        // Generated by QAbstractSocket (QIODevice) when bytes are written
    void readyRead();                       // // Generated by QAbstractSocket (QIODevice) when bytes are available to read
    void serial_data_in_for_net_out(QByteArray &p);

private:
    QTcpServer *tcp_server_p;
    QTcpSocket *tcp_socket_p;
    QDataStream in;
    QDataStream out;
    QString read_bytes_qstr;
    QByteArray read_buffer;
    SerialComms *serial_comms_object_p;

signals:
    void serial_out(QByteArray &b);
    void startStopGstreamer(bool start);    // true to start

};

#endif // NETWORKCOMMS_H
